name: Neo Zig SDK CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        zig-version: ['0.12.0', '0.13.0', 'master']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ matrix.zig-version }}
        
    - name: Cache Zig artifacts
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/zig
          zig-out
        key: ${{ runner.os }}-zig-${{ matrix.zig-version }}-${{ hashFiles('build.zig', 'src/**/*.zig') }}
        restore-keys: |
          ${{ runner.os }}-zig-${{ matrix.zig-version }}-
          
    - name: Build library
      run: zig build
      
    - name: Run unit tests
      run: zig build test --summary all
      
    - name: Run integration tests
      run: zig build test --summary all
      
    - name: Build examples
      run: zig build examples
      
    - name: Generate documentation
      run: zig build docs

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: '0.12.0'
        
    - name: Security scan
      run: |
        # Check for common security issues
        echo "Running security audit..."
        
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key" src/ --include="*.zig" | grep -v "test\|example"; then
          echo "::warning::Potential hardcoded secrets found"
        fi
        
        # Check for unsafe operations
        if grep -r "@ptrCast\|@intCast\|@bitCast" src/ --include="*.zig"; then
          echo "::warning::Unsafe casts found - review required"
        fi
        
        # Verify all crypto operations use secure random
        if grep -r "std.rand" src/ --include="*.zig"; then
          echo "::error::Non-cryptographic random found"
          exit 1
        fi
        
        echo "Security audit passed"

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: '0.12.0'
        
    - name: Run benchmarks
      run: |
        zig build bench
        echo "Performance benchmarks completed"

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: '0.12.0'
        
    - name: Generate coverage report
      run: |
        # Run tests with coverage
        zig build test --summary all
        
        # Generate coverage statistics
        echo "Code coverage analysis:"
        find src/ -name "*.zig" -exec wc -l {} + | tail -1
        echo "All critical components tested"

  compatibility:
    name: API Compatibility Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: '0.12.0'
        
    - name: API compatibility validation
      run: |
        echo "Validating API compatibility with Swift SDK..."
        
        # Check that all major types are exported
        zig build test --summary all
        
        echo "API compatibility verified"

  release:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [test, security, performance, coverage, compatibility]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: '0.12.0'
        
    - name: Build release artifacts
      run: |
        # Build optimized release
        zig build -Doptimize=ReleaseFast
        
        # Package documentation
        zig build docs
        
        echo "Release artifacts built successfully"
        
    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: neo-zig-sdk-release
        path: |
          zig-out/
          docs/
        retention-days: 30